/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables.interfaces;


import javax.annotation.Generated;
import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public interface IEBrand extends Serializable {

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.KEY</code>. 「key」- 品牌ID
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.KEY</code>. 「key」- 品牌ID
     */
    public IEBrand setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.CODE</code>. 「code」- 品牌编码
     */
    public String getCode();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.CODE</code>. 「code」- 品牌编码
     */
    public IEBrand setCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.NAME</code>. 「name」- 品牌名称
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.NAME</code>. 「name」- 品牌名称
     */
    public IEBrand setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.ALIAS</code>. 「alias」- 品牌别名
     */
    public String getAlias();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.ALIAS</code>. 「alias」- 品牌别名
     */
    public IEBrand setAlias(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.COMPANY_NAME</code>. 「companyName」- 品牌公司名
     */
    public String getCompanyName();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.COMPANY_NAME</code>. 「companyName」- 品牌公司名
     */
    public IEBrand setCompanyName(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.CATEGORY_CODE</code>. 「categoryCode」- 类别代码
     */
    public String getCategoryCode();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.CATEGORY_CODE</code>. 「categoryCode」- 类别代码
     */
    public IEBrand setCategoryCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.CATEGORY_NAME</code>. 「categoryName」- 类别名称
     */
    public String getCategoryName();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.CATEGORY_NAME</code>. 「categoryName」- 类别名称
     */
    public IEBrand setCategoryName(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.AREA</code>. 「area」- GB/T2659-2000国际标准区域码
     */
    public Integer getArea();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.AREA</code>. 「area」- GB/T2659-2000国际标准区域码
     */
    public IEBrand setArea(Integer value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.AREA_NAME</code>. 「areaName」- 区域名称
     */
    public String getAreaName();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.AREA_NAME</code>. 「areaName」- 区域名称
     */
    public IEBrand setAreaName(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.AREA_CATEGORY</code>. 「areaCategory」- 区域类别码
     */
    public String getAreaCategory();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.AREA_CATEGORY</code>. 「areaCategory」- 区域类别码
     */
    public IEBrand setAreaCategory(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.METADATA</code>. 「metadata」- 附加配置
     */
    public IEBrand setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.ACTIVE</code>. 「active」- 是否启用
     */
    public IEBrand setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.SIGMA</code>. 「sigma」- 统一标识（公司所属应用）
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.SIGMA</code>. 「sigma」- 统一标识（公司所属应用）
     */
    public IEBrand setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IEBrand setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IEBrand setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IEBrand setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IEBrand setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.E_BRAND.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    /**
     * Setter for <code>DB_ETERNAL.E_BRAND.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IEBrand setUpdatedBy(String value);

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IEBrand
     */
    public void from(cn.vertxup.erp.domain.tables.interfaces.IEBrand from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IEBrand
     */
    public <E extends cn.vertxup.erp.domain.tables.interfaces.IEBrand> E into(E into);

    default IEBrand fromJson(io.vertx.core.json.JsonObject json) {
        setKey(json.getString("KEY"));
        setCode(json.getString("CODE"));
        setName(json.getString("NAME"));
        setAlias(json.getString("ALIAS"));
        setCompanyName(json.getString("COMPANY_NAME"));
        setCategoryCode(json.getString("CATEGORY_CODE"));
        setCategoryName(json.getString("CATEGORY_NAME"));
        setArea(json.getInteger("AREA"));
        setAreaName(json.getString("AREA_NAME"));
        setAreaCategory(json.getString("AREA_CATEGORY"));
        setMetadata(json.getString("METADATA"));
        setActive(json.getBoolean("ACTIVE"));
        setSigma(json.getString("SIGMA"));
        setLanguage(json.getString("LANGUAGE"));
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        setCreatedBy(json.getString("CREATED_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        setUpdatedBy(json.getString("UPDATED_BY"));
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY", getKey());
        json.put("CODE", getCode());
        json.put("NAME", getName());
        json.put("ALIAS", getAlias());
        json.put("COMPANY_NAME", getCompanyName());
        json.put("CATEGORY_CODE", getCategoryCode());
        json.put("CATEGORY_NAME", getCategoryName());
        json.put("AREA", getArea());
        json.put("AREA_NAME", getAreaName());
        json.put("AREA_CATEGORY", getAreaCategory());
        json.put("METADATA", getMetadata());
        json.put("ACTIVE", getActive());
        json.put("SIGMA", getSigma());
        json.put("LANGUAGE", getLanguage());
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        json.put("CREATED_BY", getCreatedBy());
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        json.put("UPDATED_BY", getUpdatedBy());
        return json;
    }

}
