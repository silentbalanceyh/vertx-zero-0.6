/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.erp.domain.tables.daos;


import cn.vertxup.erp.domain.tables.EBrand;
import cn.vertxup.erp.domain.tables.records.EBrandRecord;
import io.github.jklingsporn.vertx.jooq.future.VertxDAO;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.CompletableFuture;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EBrandDao extends DAOImpl<EBrandRecord, cn.vertxup.erp.domain.tables.pojos.EBrand, String> implements VertxDAO<cn.vertxup.erp.domain.tables.records.EBrandRecord, cn.vertxup.erp.domain.tables.pojos.EBrand, java.lang.String> {

    private io.vertx.core.Vertx vertx;

    /**
     * Create a new EBrandDao without any configuration
     */
    public EBrandDao() {
        super(EBrand.E_BRAND, cn.vertxup.erp.domain.tables.pojos.EBrand.class);
    }

    /**
     * Create a new EBrandDao with an attached configuration
     */
    public EBrandDao(Configuration configuration) {
        super(EBrand.E_BRAND, cn.vertxup.erp.domain.tables.pojos.EBrand.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.erp.domain.tables.pojos.EBrand object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByKey(String... values) {
        return fetch(EBrand.E_BRAND.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.erp.domain.tables.pojos.EBrand fetchOneByKey(String value) {
        return fetchOne(EBrand.E_BRAND.KEY, value);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByCode(String... values) {
        return fetch(EBrand.E_BRAND.CODE, values);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByName(String... values) {
        return fetch(EBrand.E_BRAND.NAME, values);
    }

    /**
     * Fetch records that have <code>ALIAS IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByAlias(String... values) {
        return fetch(EBrand.E_BRAND.ALIAS, values);
    }

    /**
     * Fetch records that have <code>COMPANY_NAME IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByCompanyName(String... values) {
        return fetch(EBrand.E_BRAND.COMPANY_NAME, values);
    }

    /**
     * Fetch records that have <code>CATEGORY_CODE IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByCategoryCode(String... values) {
        return fetch(EBrand.E_BRAND.CATEGORY_CODE, values);
    }

    /**
     * Fetch records that have <code>CATEGORY_NAME IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByCategoryName(String... values) {
        return fetch(EBrand.E_BRAND.CATEGORY_NAME, values);
    }

    /**
     * Fetch records that have <code>AREA IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByArea(Integer... values) {
        return fetch(EBrand.E_BRAND.AREA, values);
    }

    /**
     * Fetch records that have <code>AREA_NAME IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByAreaName(String... values) {
        return fetch(EBrand.E_BRAND.AREA_NAME, values);
    }

    /**
     * Fetch records that have <code>AREA_CATEGORY IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByAreaCategory(String... values) {
        return fetch(EBrand.E_BRAND.AREA_CATEGORY, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByMetadata(String... values) {
        return fetch(EBrand.E_BRAND.METADATA, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByActive(Boolean... values) {
        return fetch(EBrand.E_BRAND.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchBySigma(String... values) {
        return fetch(EBrand.E_BRAND.SIGMA, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByLanguage(String... values) {
        return fetch(EBrand.E_BRAND.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(EBrand.E_BRAND.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByCreatedBy(String... values) {
        return fetch(EBrand.E_BRAND.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(EBrand.E_BRAND.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchByUpdatedBy(String... values) {
        return fetch(EBrand.E_BRAND.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.erp.domain.tables.pojos.EBrand> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h -> h.complete(fetchOneByKey(value)), vertx());
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByCodeAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.CODE, values);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByNameAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.NAME, values);
    }

    /**
     * Fetch records that have <code>ALIAS IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByAliasAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.ALIAS, values);
    }

    /**
     * Fetch records that have <code>COMPANY_NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByCompanyNameAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.COMPANY_NAME, values);
    }

    /**
     * Fetch records that have <code>CATEGORY_CODE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByCategoryCodeAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.CATEGORY_CODE, values);
    }

    /**
     * Fetch records that have <code>CATEGORY_NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByCategoryNameAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.CATEGORY_NAME, values);
    }

    /**
     * Fetch records that have <code>AREA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByAreaAsync(List<Integer> values) {
        return fetchAsync(EBrand.E_BRAND.AREA, values);
    }

    /**
     * Fetch records that have <code>AREA_NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByAreaNameAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.AREA_NAME, values);
    }

    /**
     * Fetch records that have <code>AREA_CATEGORY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByAreaCategoryAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.AREA_CATEGORY, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.METADATA, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(EBrand.E_BRAND.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchBySigmaAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.SIGMA, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByCreatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(EBrand.E_BRAND.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByCreatedByAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByUpdatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(EBrand.E_BRAND.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.erp.domain.tables.pojos.EBrand>> fetchByUpdatedByAsync(List<String> values) {
        return fetchAsync(EBrand.E_BRAND.UPDATED_BY, values);
    }

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
