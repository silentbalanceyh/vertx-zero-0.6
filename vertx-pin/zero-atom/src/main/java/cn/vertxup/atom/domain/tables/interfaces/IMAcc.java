/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain.tables.interfaces;


import javax.annotation.Generated;
import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public interface IMAcc extends Serializable {

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.KEY</code>. 「key」- 增量记录ID
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.KEY</code>. 「key」- 增量记录ID
     */
    public IMAcc setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.MODEL_ID</code>. 「modelId」- 关联的模型identifier，用于描述
     */
    public String getModelId();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.MODEL_ID</code>. 「modelId」- 关联的模型identifier，用于描述
     */
    public IMAcc setModelId(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.MODEL_KEY</code>. 「modelKey」- 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public String getModelKey();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.MODEL_KEY</code>. 「modelKey」- 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public IMAcc setModelKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.RECORD_JSON</code>. 「recordJson」- 上一次的记录内容（Json格式）
     */
    public String getRecordJson();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.RECORD_JSON</code>. 「recordJson」- 上一次的记录内容（Json格式）
     */
    public IMAcc setRecordJson(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.RECORD_RAW</code>. 「recordRaw」- 上一次的记录的原始内容
     */
    public String getRecordRaw();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.RECORD_RAW</code>. 「recordRaw」- 上一次的记录的原始内容
     */
    public IMAcc setRecordRaw(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.RECORD_UNIQUE</code>. 「recordUnique」- 业务标识规则专用Key，可计算获取
     */
    public String getRecordUnique();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.RECORD_UNIQUE</code>. 「recordUnique」- 业务标识规则专用Key，可计算获取
     */
    public IMAcc setRecordUnique(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.SIGMA</code>. 「sigma」- 统一标识
     */
    public IMAcc setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IMAcc setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.ACTIVE</code>. 「active」- 是否启用
     */
    public IMAcc setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.METADATA</code>. 「metadata」- 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.METADATA</code>. 「metadata」- 附加配置数据
     */
    public IMAcc setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IMAcc setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IMAcc setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IMAcc setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.M_ACC.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    /**
     * Setter for <code>DB_ETERNAL.M_ACC.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IMAcc setUpdatedBy(String value);

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IMAcc
     */
    public void from(cn.vertxup.atom.domain.tables.interfaces.IMAcc from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IMAcc
     */
    public <E extends cn.vertxup.atom.domain.tables.interfaces.IMAcc> E into(E into);

    default IMAcc fromJson(io.vertx.core.json.JsonObject json) {
        setKey(json.getString("KEY"));
        setModelId(json.getString("MODEL_ID"));
        setModelKey(json.getString("MODEL_KEY"));
        setRecordJson(json.getString("RECORD_JSON"));
        setRecordRaw(json.getString("RECORD_RAW"));
        setRecordUnique(json.getString("RECORD_UNIQUE"));
        setSigma(json.getString("SIGMA"));
        setLanguage(json.getString("LANGUAGE"));
        setActive(json.getBoolean("ACTIVE"));
        setMetadata(json.getString("METADATA"));
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        setCreatedBy(json.getString("CREATED_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        setUpdatedBy(json.getString("UPDATED_BY"));
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY", getKey());
        json.put("MODEL_ID", getModelId());
        json.put("MODEL_KEY", getModelKey());
        json.put("RECORD_JSON", getRecordJson());
        json.put("RECORD_RAW", getRecordRaw());
        json.put("RECORD_UNIQUE", getRecordUnique());
        json.put("SIGMA", getSigma());
        json.put("LANGUAGE", getLanguage());
        json.put("ACTIVE", getActive());
        json.put("METADATA", getMetadata());
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        json.put("CREATED_BY", getCreatedBy());
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        json.put("UPDATED_BY", getUpdatedBy());
        return json;
    }

}
