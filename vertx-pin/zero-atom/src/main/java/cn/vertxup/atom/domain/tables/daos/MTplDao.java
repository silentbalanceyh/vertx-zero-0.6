/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain.tables.daos;


import cn.vertxup.atom.domain.tables.MTpl;
import cn.vertxup.atom.domain.tables.records.MTplRecord;
import io.github.jklingsporn.vertx.jooq.future.VertxDAO;
import io.github.jklingsporn.vertx.jooq.future.util.FutureTool;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.CompletableFuture;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MTplDao extends DAOImpl<MTplRecord, cn.vertxup.atom.domain.tables.pojos.MTpl, String> implements VertxDAO<cn.vertxup.atom.domain.tables.records.MTplRecord, cn.vertxup.atom.domain.tables.pojos.MTpl, java.lang.String> {

    private io.vertx.core.Vertx vertx;

    /**
     * Create a new MTplDao without any configuration
     */
    public MTplDao() {
        super(MTpl.M_TPL, cn.vertxup.atom.domain.tables.pojos.MTpl.class);
    }

    /**
     * Create a new MTplDao with an attached configuration
     */
    public MTplDao(Configuration configuration) {
        super(MTpl.M_TPL, cn.vertxup.atom.domain.tables.pojos.MTpl.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(cn.vertxup.atom.domain.tables.pojos.MTpl object) {
        return object.getKey();
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByKey(String... values) {
        return fetch(MTpl.M_TPL.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code>
     */
    public cn.vertxup.atom.domain.tables.pojos.MTpl fetchOneByKey(String value) {
        return fetchOne(MTpl.M_TPL.KEY, value);
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByName(String... values) {
        return fetch(MTpl.M_TPL.NAME, values);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByCode(String... values) {
        return fetch(MTpl.M_TPL.CODE, values);
    }

    /**
     * Fetch records that have <code>TYPE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByType(String... values) {
        return fetch(MTpl.M_TPL.TYPE, values);
    }

    /**
     * Fetch records that have <code>TPL_CATEGORY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByTplCategory(String... values) {
        return fetch(MTpl.M_TPL.TPL_CATEGORY, values);
    }

    /**
     * Fetch records that have <code>TPL_INTEGRATION IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByTplIntegration(String... values) {
        return fetch(MTpl.M_TPL.TPL_INTEGRATION, values);
    }

    /**
     * Fetch records that have <code>TPL_ACL IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByTplAcl(String... values) {
        return fetch(MTpl.M_TPL.TPL_ACL, values);
    }

    /**
     * Fetch records that have <code>TPL_ACL_VISIT IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByTplAclVisit(String... values) {
        return fetch(MTpl.M_TPL.TPL_ACL_VISIT, values);
    }

    /**
     * Fetch records that have <code>TPL_MODEL IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByTplModel(String... values) {
        return fetch(MTpl.M_TPL.TPL_MODEL, values);
    }

    /**
     * Fetch records that have <code>TPL_ENTITY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByTplEntity(String... values) {
        return fetch(MTpl.M_TPL.TPL_ENTITY, values);
    }

    /**
     * Fetch records that have <code>TPL_API IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByTplApi(String... values) {
        return fetch(MTpl.M_TPL.TPL_API, values);
    }

    /**
     * Fetch records that have <code>TPL_JOB IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByTplJob(String... values) {
        return fetch(MTpl.M_TPL.TPL_JOB, values);
    }

    /**
     * Fetch records that have <code>TPL_UI IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByTplUi(String... values) {
        return fetch(MTpl.M_TPL.TPL_UI, values);
    }

    /**
     * Fetch records that have <code>TPL_UI_LIST IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByTplUiList(String... values) {
        return fetch(MTpl.M_TPL.TPL_UI_LIST, values);
    }

    /**
     * Fetch records that have <code>TPL_UI_FORM IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByTplUiForm(String... values) {
        return fetch(MTpl.M_TPL.TPL_UI_FORM, values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchBySigma(String... values) {
        return fetch(MTpl.M_TPL.SIGMA, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByLanguage(String... values) {
        return fetch(MTpl.M_TPL.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByActive(Boolean... values) {
        return fetch(MTpl.M_TPL.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByMetadata(String... values) {
        return fetch(MTpl.M_TPL.METADATA, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(MTpl.M_TPL.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByCreatedBy(String... values) {
        return fetch(MTpl.M_TPL.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(MTpl.M_TPL.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code>
     */
    public List<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchByUpdatedBy(String... values) {
        return fetch(MTpl.M_TPL.UPDATED_BY, values);
    }

    /**
     * Fetch records that have <code>KEY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByKeyAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.KEY, values);
    }

    /**
     * Fetch a unique record that has <code>KEY = value</code> asynchronously
     */
    public CompletableFuture<cn.vertxup.atom.domain.tables.pojos.MTpl> fetchOneByKeyAsync(String value) {
        return FutureTool.executeBlocking(h -> h.complete(fetchOneByKey(value)), vertx());
    }

    /**
     * Fetch records that have <code>NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByNameAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.NAME, values);
    }

    /**
     * Fetch records that have <code>CODE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByCodeAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.CODE, values);
    }

    /**
     * Fetch records that have <code>TYPE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByTypeAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.TYPE, values);
    }

    /**
     * Fetch records that have <code>TPL_CATEGORY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByTplCategoryAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.TPL_CATEGORY, values);
    }

    /**
     * Fetch records that have <code>TPL_INTEGRATION IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByTplIntegrationAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.TPL_INTEGRATION, values);
    }

    /**
     * Fetch records that have <code>TPL_ACL IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByTplAclAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.TPL_ACL, values);
    }

    /**
     * Fetch records that have <code>TPL_ACL_VISIT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByTplAclVisitAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.TPL_ACL_VISIT, values);
    }

    /**
     * Fetch records that have <code>TPL_MODEL IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByTplModelAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.TPL_MODEL, values);
    }

    /**
     * Fetch records that have <code>TPL_ENTITY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByTplEntityAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.TPL_ENTITY, values);
    }

    /**
     * Fetch records that have <code>TPL_API IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByTplApiAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.TPL_API, values);
    }

    /**
     * Fetch records that have <code>TPL_JOB IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByTplJobAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.TPL_JOB, values);
    }

    /**
     * Fetch records that have <code>TPL_UI IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByTplUiAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.TPL_UI, values);
    }

    /**
     * Fetch records that have <code>TPL_UI_LIST IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByTplUiListAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.TPL_UI_LIST, values);
    }

    /**
     * Fetch records that have <code>TPL_UI_FORM IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByTplUiFormAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.TPL_UI_FORM, values);
    }

    /**
     * Fetch records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchBySigmaAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.SIGMA, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByLanguageAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.LANGUAGE, values);
    }

    /**
     * Fetch records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByActiveAsync(List<Boolean> values) {
        return fetchAsync(MTpl.M_TPL.ACTIVE, values);
    }

    /**
     * Fetch records that have <code>METADATA IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByMetadataAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.METADATA, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByCreatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(MTpl.M_TPL.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByCreatedByAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByUpdatedAtAsync(List<LocalDateTime> values) {
        return fetchAsync(MTpl.M_TPL.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public CompletableFuture<List<cn.vertxup.atom.domain.tables.pojos.MTpl>> fetchByUpdatedByAsync(List<String> values) {
        return fetchAsync(MTpl.M_TPL.UPDATED_BY, values);
    }

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
