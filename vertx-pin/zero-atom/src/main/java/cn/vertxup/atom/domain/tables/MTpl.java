/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.atom.domain.tables;


import cn.vertxup.atom.domain.Db;
import cn.vertxup.atom.domain.Indexes;
import cn.vertxup.atom.domain.Keys;
import cn.vertxup.atom.domain.tables.records.MTplRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MTpl extends TableImpl<MTplRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.M_TPL</code>
     */
    public static final MTpl M_TPL = new MTpl();
    private static final long serialVersionUID = -76373819;
    /**
     * The column <code>DB_ETERNAL.M_TPL.KEY</code>. 「key」- 模板ID
     */
    public final TableField<MTplRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 模板ID");
    /**
     * The column <code>DB_ETERNAL.M_TPL.NAME</code>. 「name」- 模板名称
     */
    public final TableField<MTplRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(256), this, "「name」- 模板名称");
    /**
     * The column <code>DB_ETERNAL.M_TPL.CODE</code>. 「code」- 模板编码
     */
    public final TableField<MTplRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(256), this, "「code」- 模板编码");
    /**
     * The column <code>DB_ETERNAL.M_TPL.TYPE</code>. 「type」- 模板类型
     */
    public final TableField<MTplRecord, String> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「type」- 模板类型");
    /**
     * The column <code>DB_ETERNAL.M_TPL.TPL_CATEGORY</code>. 「tplCategory」- 分类配置
     */
    public final TableField<MTplRecord, String> TPL_CATEGORY = createField("TPL_CATEGORY", org.jooq.impl.SQLDataType.CLOB, this, "「tplCategory」- 分类配置");
    /**
     * The column <code>DB_ETERNAL.M_TPL.TPL_INTEGRATION</code>. 「tplIntegration」- 集成配置
     */
    public final TableField<MTplRecord, String> TPL_INTEGRATION = createField("TPL_INTEGRATION", org.jooq.impl.SQLDataType.CLOB, this, "「tplIntegration」- 集成配置");
    /**
     * The column <code>DB_ETERNAL.M_TPL.TPL_ACL</code>. 「tplAcl」- 安全配置
     */
    public final TableField<MTplRecord, String> TPL_ACL = createField("TPL_ACL", org.jooq.impl.SQLDataType.CLOB, this, "「tplAcl」- 安全配置");
    /**
     * The column <code>DB_ETERNAL.M_TPL.TPL_ACL_VISIT</code>. 「tplAclVisit」- 资源访问者配置
     */
    public final TableField<MTplRecord, String> TPL_ACL_VISIT = createField("TPL_ACL_VISIT", org.jooq.impl.SQLDataType.CLOB, this, "「tplAclVisit」- 资源访问者配置");
    /**
     * The column <code>DB_ETERNAL.M_TPL.TPL_MODEL</code>. 「tplModel」- 模型配置
     */
    public final TableField<MTplRecord, String> TPL_MODEL = createField("TPL_MODEL", org.jooq.impl.SQLDataType.CLOB, this, "「tplModel」- 模型配置");
    /**
     * The column <code>DB_ETERNAL.M_TPL.TPL_ENTITY</code>. 「tplEntity」- 实体配置
     */
    public final TableField<MTplRecord, String> TPL_ENTITY = createField("TPL_ENTITY", org.jooq.impl.SQLDataType.CLOB, this, "「tplEntity」- 实体配置");
    /**
     * The column <code>DB_ETERNAL.M_TPL.TPL_API</code>. 「tplApi」- 接口配置
     */
    public final TableField<MTplRecord, String> TPL_API = createField("TPL_API", org.jooq.impl.SQLDataType.CLOB, this, "「tplApi」- 接口配置");
    /**
     * The column <code>DB_ETERNAL.M_TPL.TPL_JOB</code>. 「tplJob」- 任务配置
     */
    public final TableField<MTplRecord, String> TPL_JOB = createField("TPL_JOB", org.jooq.impl.SQLDataType.CLOB, this, "「tplJob」- 任务配置");
    /**
     * The column <code>DB_ETERNAL.M_TPL.TPL_UI</code>. 「tplUi」- 界面配置
     */
    public final TableField<MTplRecord, String> TPL_UI = createField("TPL_UI", org.jooq.impl.SQLDataType.CLOB, this, "「tplUi」- 界面配置");
    /**
     * The column <code>DB_ETERNAL.M_TPL.TPL_UI_LIST</code>. 「tplUiList」- 界面列表配置
     */
    public final TableField<MTplRecord, String> TPL_UI_LIST = createField("TPL_UI_LIST", org.jooq.impl.SQLDataType.CLOB, this, "「tplUiList」- 界面列表配置");
    /**
     * The column <code>DB_ETERNAL.M_TPL.TPL_UI_FORM</code>. 「tplUiForm」- 界面表单配置
     */
    public final TableField<MTplRecord, String> TPL_UI_FORM = createField("TPL_UI_FORM", org.jooq.impl.SQLDataType.CLOB, this, "「tplUiForm」- 界面表单配置");
    /**
     * The column <code>DB_ETERNAL.M_TPL.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<MTplRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.M_TPL.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<MTplRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.M_TPL.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<MTplRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.M_TPL.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<MTplRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.M_TPL.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<MTplRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.M_TPL.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<MTplRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.M_TPL.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<MTplRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.M_TPL.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<MTplRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.M_TPL</code> table reference
     */
    public MTpl() {
        this(DSL.name("M_TPL"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.M_TPL</code> table reference
     */
    public MTpl(String alias) {
        this(DSL.name(alias), M_TPL);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.M_TPL</code> table reference
     */
    public MTpl(Name alias) {
        this(alias, M_TPL);
    }

    private MTpl(Name alias, Table<MTplRecord> aliased) {
        this(alias, aliased, null);
    }

    private MTpl(Name alias, Table<MTplRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MTplRecord> getRecordType() {
        return MTplRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.M_TPL_CODE, Indexes.M_TPL_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MTplRecord> getPrimaryKey() {
        return Keys.KEY_M_TPL_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MTplRecord>> getKeys() {
        return Arrays.<UniqueKey<MTplRecord>>asList(Keys.KEY_M_TPL_PRIMARY, Keys.KEY_M_TPL_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MTpl as(String alias) {
        return new MTpl(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MTpl as(Name alias) {
        return new MTpl(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MTpl rename(String name) {
        return new MTpl(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MTpl rename(Name name) {
        return new MTpl(name, null);
    }
}
