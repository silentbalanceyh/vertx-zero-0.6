/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.fm.domain.tables.interfaces;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IFPreAuthorize extends Serializable {

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.KEY</code>. 「key」- 预授权ID
     */
    public IFPreAuthorize setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.KEY</code>. 「key」- 预授权ID
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.CODE</code>. 「code」 - 预授权系统编号
     */
    public IFPreAuthorize setCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.CODE</code>. 「code」 - 预授权系统编号
     */
    public String getCode();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.SERIAL</code>. 「serial」 - 预授权单据号
     */
    public IFPreAuthorize setSerial(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.SERIAL</code>. 「serial」 - 预授权单据号
     */
    public String getSerial();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.AMOUNT</code>. 「amount」- 当前预授权刷单金额
     */
    public IFPreAuthorize setAmount(BigDecimal value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.AMOUNT</code>. 「amount」- 当前预授权刷单金额
     */
    public BigDecimal getAmount();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.COMMENT</code>. 「comment」 - 预授权备注
     */
    public IFPreAuthorize setComment(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.COMMENT</code>. 「comment」 - 预授权备注
     */
    public String getComment();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.EXPIRED_AT</code>. 「expiredAt」——预授权有效期
     */
    public IFPreAuthorize setExpiredAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.EXPIRED_AT</code>. 「expiredAt」——预授权有效期
     */
    public LocalDateTime getExpiredAt();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.BANK_NAME</code>. 「bankName」- 预授权银行名称
     */
    public IFPreAuthorize setBankName(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.BANK_NAME</code>. 「bankName」- 预授权银行名称
     */
    public String getBankName();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.BANK_CARD</code>. 「bankCard」- 刷预授权的银行卡号
     */
    public IFPreAuthorize setBankCard(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.BANK_CARD</code>. 「bankCard」- 刷预授权的银行卡号
     */
    public String getBankCard();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.ORDER_ID</code>. 「orderId」- 预授权所属订单ID
     */
    public IFPreAuthorize setOrderId(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.ORDER_ID</code>. 「orderId」- 预授权所属订单ID
     */
    public String getOrderId();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.BILL_ID</code>. 「billId」- 预授权所属账单ID
     */
    public IFPreAuthorize setBillId(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.BILL_ID</code>. 「billId」- 预授权所属账单ID
     */
    public String getBillId();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.SIGMA</code>. 「sigma」- 统一标识
     */
    public IFPreAuthorize setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IFPreAuthorize setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.ACTIVE</code>. 「active」- 是否启用
     */
    public IFPreAuthorize setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.METADATA</code>. 「metadata」- 附加配置数据
     */
    public IFPreAuthorize setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.METADATA</code>. 「metadata」- 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IFPreAuthorize setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IFPreAuthorize setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IFPreAuthorize setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IFPreAuthorize setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_PRE_AUTHORIZE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IFPreAuthorize
     */
    public void from(cn.vertxup.fm.domain.tables.interfaces.IFPreAuthorize from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IFPreAuthorize
     */
    public <E extends cn.vertxup.fm.domain.tables.interfaces.IFPreAuthorize> E into(E into);

    default IFPreAuthorize fromJson(io.vertx.core.json.JsonObject json) {
        setKey(json.getString("KEY"));
        setCode(json.getString("CODE"));
        setSerial(json.getString("SERIAL"));
        // Omitting unrecognized type java.math.BigDecimal for column AMOUNT!
        setComment(json.getString("COMMENT"));
        // Omitting unrecognized type java.time.LocalDateTime for column EXPIRED_AT!
        setBankName(json.getString("BANK_NAME"));
        setBankCard(json.getString("BANK_CARD"));
        setOrderId(json.getString("ORDER_ID"));
        setBillId(json.getString("BILL_ID"));
        setSigma(json.getString("SIGMA"));
        setLanguage(json.getString("LANGUAGE"));
        setActive(json.getBoolean("ACTIVE"));
        setMetadata(json.getString("METADATA"));
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        setCreatedBy(json.getString("CREATED_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        setUpdatedBy(json.getString("UPDATED_BY"));
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY",getKey());
        json.put("CODE",getCode());
        json.put("SERIAL",getSerial());
        // Omitting unrecognized type java.math.BigDecimal for column AMOUNT!
        json.put("COMMENT",getComment());
        // Omitting unrecognized type java.time.LocalDateTime for column EXPIRED_AT!
        json.put("BANK_NAME",getBankName());
        json.put("BANK_CARD",getBankCard());
        json.put("ORDER_ID",getOrderId());
        json.put("BILL_ID",getBillId());
        json.put("SIGMA",getSigma());
        json.put("LANGUAGE",getLanguage());
        json.put("ACTIVE",getActive());
        json.put("METADATA",getMetadata());
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        json.put("CREATED_BY",getCreatedBy());
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        json.put("UPDATED_BY",getUpdatedBy());
        return json;
    }

}
