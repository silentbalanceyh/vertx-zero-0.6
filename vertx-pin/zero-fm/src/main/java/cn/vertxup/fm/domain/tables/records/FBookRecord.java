/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.fm.domain.tables.records;


import cn.vertxup.fm.domain.tables.FBook;
import cn.vertxup.fm.domain.tables.interfaces.IFBook;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FBookRecord extends UpdatableRecordImpl<FBookRecord> implements IFBook {

    private static final long serialVersionUID = -921367571;

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.KEY</code>. 「key」- 账本主键ID
     */
    @Override
    public FBookRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.KEY</code>. 「key」- 账本主键ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.NAME</code>. 「name」 - 账本名称
     */
    @Override
    public FBookRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.NAME</code>. 「name」 - 账本名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.CODE</code>. 「code」 - 账本的系统编号
     */
    @Override
    public FBookRecord setCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.CODE</code>. 「code」 - 账本的系统编号
     */
    @Override
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.SERIAL</code>. 「serial」 - 财务系统账本编号
     */
    @Override
    public FBookRecord setSerial(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.SERIAL</code>. 「serial」 - 财务系统账本编号
     */
    @Override
    public String getSerial() {
        return (String) get(3);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.TYPE</code>. 「type」 - 账本类型
     */
    @Override
    public FBookRecord setType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.TYPE</code>. 「type」 - 账本类型
     */
    @Override
    public String getType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.MAJOR</code>. 「major」- 主账本标识
     */
    @Override
    public FBookRecord setMajor(Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.MAJOR</code>. 「major」- 主账本标识
     */
    @Override
    public Boolean getMajor() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.AMOUNT</code>. 「amount」- 交易金额，正数：应收，负数：应退，最终计算总金额
     */
    @Override
    public FBookRecord setAmount(BigDecimal value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.AMOUNT</code>. 「amount」- 交易金额，正数：应收，负数：应退，最终计算总金额
     */
    @Override
    public BigDecimal getAmount() {
        return (BigDecimal) get(6);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.COMMENT</code>. 「comment」 - 账本备注
     */
    @Override
    public FBookRecord setComment(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.COMMENT</code>. 「comment」 - 账本备注
     */
    @Override
    public String getComment() {
        return (String) get(7);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.CHECKED</code>. 「checked」- 是否检查
     */
    @Override
    public FBookRecord setChecked(Boolean value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.CHECKED</code>. 「checked」- 是否检查
     */
    @Override
    public Boolean getChecked() {
        return (Boolean) get(8);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.CHECKED_DESC</code>. 「checkedDesc」 - 账本检查描述信息
     */
    @Override
    public FBookRecord setCheckedDesc(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.CHECKED_DESC</code>. 「checkedDesc」 - 账本检查描述信息
     */
    @Override
    public String getCheckedDesc() {
        return (String) get(9);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.EXCEED</code>. 「exceed」- 是否加收
     */
    @Override
    public FBookRecord setExceed(Boolean value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.EXCEED</code>. 「exceed」- 是否加收
     */
    @Override
    public Boolean getExceed() {
        return (Boolean) get(10);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.EXCEED_DESC</code>. 「exceedDesc」 - 账本加收描述信息
     */
    @Override
    public FBookRecord setExceedDesc(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.EXCEED_DESC</code>. 「exceedDesc」 - 账本加收描述信息
     */
    @Override
    public String getExceedDesc() {
        return (String) get(11);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.PRE_AUTHORIZE_ID</code>. 「preAuthorizeId」- 关联预授权
     */
    @Override
    public FBookRecord setPreAuthorizeId(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.PRE_AUTHORIZE_ID</code>. 「preAuthorizeId」- 关联预授权
     */
    @Override
    public String getPreAuthorizeId() {
        return (String) get(12);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.PRE_AUTHORIZE</code>. 「preAuthorize」- 是否预授权
     */
    @Override
    public FBookRecord setPreAuthorize(Boolean value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.PRE_AUTHORIZE</code>. 「preAuthorize」- 是否预授权
     */
    @Override
    public Boolean getPreAuthorize() {
        return (Boolean) get(13);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.PRE_AUTHORIZE_DESC</code>. 「preAuthorizeDesc」 - 预授权描述信息
     */
    @Override
    public FBookRecord setPreAuthorizeDesc(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.PRE_AUTHORIZE_DESC</code>. 「preAuthorizeDesc」 - 预授权描述信息
     */
    @Override
    public String getPreAuthorizeDesc() {
        return (String) get(14);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.MODEL_ID</code>. 「modelId」- 关联的模型identifier，用于描述
     */
    @Override
    public FBookRecord setModelId(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.MODEL_ID</code>. 「modelId」- 关联的模型identifier，用于描述
     */
    @Override
    public String getModelId() {
        return (String) get(15);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.MODEL_KEY</code>. 「modelKey」- 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public FBookRecord setModelKey(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.MODEL_KEY</code>. 「modelKey」- 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public String getModelKey() {
        return (String) get(16);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.PARENT_ID</code>. 「parentId」- 子账本专用，引用父账本ID
     */
    @Override
    public FBookRecord setParentId(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.PARENT_ID</code>. 「parentId」- 子账本专用，引用父账本ID
     */
    @Override
    public String getParentId() {
        return (String) get(17);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.ORDER_ID</code>. 「orderId」- 订单对应的订单ID
     */
    @Override
    public FBookRecord setOrderId(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.ORDER_ID</code>. 「orderId」- 订单对应的订单ID
     */
    @Override
    public String getOrderId() {
        return (String) get(18);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public FBookRecord setSigma(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(19);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public FBookRecord setLanguage(String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(20);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public FBookRecord setActive(Boolean value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(21);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public FBookRecord setMetadata(String value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(22);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public FBookRecord setCreatedAt(LocalDateTime value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(23);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public FBookRecord setCreatedBy(String value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(24);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public FBookRecord setUpdatedAt(LocalDateTime value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(25);
    }

    /**
     * Setter for <code>DB_ETERNAL.F_BOOK.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public FBookRecord setUpdatedBy(String value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for <code>DB_ETERNAL.F_BOOK.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(26);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public void from(IFBook from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setSerial(from.getSerial());
        setType(from.getType());
        setMajor(from.getMajor());
        setAmount(from.getAmount());
        setComment(from.getComment());
        setChecked(from.getChecked());
        setCheckedDesc(from.getCheckedDesc());
        setExceed(from.getExceed());
        setExceedDesc(from.getExceedDesc());
        setPreAuthorizeId(from.getPreAuthorizeId());
        setPreAuthorize(from.getPreAuthorize());
        setPreAuthorizeDesc(from.getPreAuthorizeDesc());
        setModelId(from.getModelId());
        setModelKey(from.getModelKey());
        setParentId(from.getParentId());
        setOrderId(from.getOrderId());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public <E extends IFBook> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FBookRecord
     */
    public FBookRecord() {
        super(FBook.F_BOOK);
    }

    /**
     * Create a detached, initialised FBookRecord
     */
    public FBookRecord(String key, String name, String code, String serial, String type, Boolean major, BigDecimal amount, String comment, Boolean checked, String checkedDesc, Boolean exceed, String exceedDesc, String preAuthorizeId, Boolean preAuthorize, String preAuthorizeDesc, String modelId, String modelKey, String parentId, String orderId, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(FBook.F_BOOK);

        set(0, key);
        set(1, name);
        set(2, code);
        set(3, serial);
        set(4, type);
        set(5, major);
        set(6, amount);
        set(7, comment);
        set(8, checked);
        set(9, checkedDesc);
        set(10, exceed);
        set(11, exceedDesc);
        set(12, preAuthorizeId);
        set(13, preAuthorize);
        set(14, preAuthorizeDesc);
        set(15, modelId);
        set(16, modelKey);
        set(17, parentId);
        set(18, orderId);
        set(19, sigma);
        set(20, language);
        set(21, active);
        set(22, metadata);
        set(23, createdAt);
        set(24, createdBy);
        set(25, updatedAt);
        set(26, updatedBy);
    }
}
