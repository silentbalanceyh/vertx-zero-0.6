/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.fm.domain.tables;


import cn.vertxup.fm.domain.Db;
import cn.vertxup.fm.domain.Indexes;
import cn.vertxup.fm.domain.Keys;
import cn.vertxup.fm.domain.tables.records.FSettlementItemRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FSettlementItem extends TableImpl<FSettlementItemRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.F_SETTLEMENT_ITEM</code>
     */
    public static final FSettlementItem F_SETTLEMENT_ITEM = new FSettlementItem();
    private static final long serialVersionUID = 259680014;
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.KEY</code>. 「key」- 结算单明细主键
     */
    public final TableField<FSettlementItemRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 结算单明细主键");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.NAME</code>. 「name」 -  明细名称
     */
    public final TableField<FSettlementItemRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "「name」 -  明细名称");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.CODE</code>. 「code」 - 明细系统代码
     */
    public final TableField<FSettlementItemRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "「code」 - 明细系统代码");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.SERIAL</code>. 「serial」 - 明细编号
     */
    public final TableField<FSettlementItemRecord, String> SERIAL = createField("SERIAL", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "「serial」 - 明细编号");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.AMOUNT</code>. 「amount」——价税合计，实际结算金额
     */
    public final TableField<FSettlementItemRecord, BigDecimal> AMOUNT = createField("AMOUNT", org.jooq.impl.SQLDataType.DECIMAL(18, 2).nullable(false), this, "「amount」——价税合计，实际结算金额");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.COMMENT</code>. 「comment」 - 明细备注
     */
    public final TableField<FSettlementItemRecord, String> COMMENT = createField("COMMENT", org.jooq.impl.SQLDataType.CLOB, this, "「comment」 - 明细备注");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.MANUAL_NO</code>. 「manualNo」 - 手工单号（线下单号专用）
     */
    public final TableField<FSettlementItemRecord, String> MANUAL_NO = createField("MANUAL_NO", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「manualNo」 - 手工单号（线下单号专用）");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.CUSTOMER_ID</code>. 「customerId」结算对象（单位ID）
     */
    public final TableField<FSettlementItemRecord, String> CUSTOMER_ID = createField("CUSTOMER_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「customerId」结算对象（单位ID）");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.PAY_TERM_ID</code>. 「payTermId」- 账单项ID
     */
    public final TableField<FSettlementItemRecord, String> PAY_TERM_ID = createField("PAY_TERM_ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「payTermId」- 账单项ID");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.SETTLEMENT_ID</code>. 「settlementId」- 结算单ID，该字段有值标识已经结算
     */
    public final TableField<FSettlementItemRecord, String> SETTLEMENT_ID = createField("SETTLEMENT_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「settlementId」- 结算单ID，该字段有值标识已经结算");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.RECEIVABLE_ID</code>. 「receivableId」- 应收账单ID
     */
    public final TableField<FSettlementItemRecord, String> RECEIVABLE_ID = createField("RECEIVABLE_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「receivableId」- 应收账单ID");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<FSettlementItemRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<FSettlementItemRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<FSettlementItemRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<FSettlementItemRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<FSettlementItemRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<FSettlementItemRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<FSettlementItemRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT_ITEM.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<FSettlementItemRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.F_SETTLEMENT_ITEM</code> table reference
     */
    public FSettlementItem() {
        this(DSL.name("F_SETTLEMENT_ITEM"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.F_SETTLEMENT_ITEM</code> table reference
     */
    public FSettlementItem(String alias) {
        this(DSL.name(alias), F_SETTLEMENT_ITEM);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.F_SETTLEMENT_ITEM</code> table reference
     */
    public FSettlementItem(Name alias) {
        this(alias, F_SETTLEMENT_ITEM);
    }

    private FSettlementItem(Name alias, Table<FSettlementItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private FSettlementItem(Name alias, Table<FSettlementItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FSettlementItemRecord> getRecordType() {
        return FSettlementItemRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.F_SETTLEMENT_ITEM_CODE, Indexes.F_SETTLEMENT_ITEM_PRIMARY, Indexes.F_SETTLEMENT_ITEM_SERIAL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FSettlementItemRecord> getPrimaryKey() {
        return Keys.KEY_F_SETTLEMENT_ITEM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FSettlementItemRecord>> getKeys() {
        return Arrays.<UniqueKey<FSettlementItemRecord>>asList(Keys.KEY_F_SETTLEMENT_ITEM_PRIMARY, Keys.KEY_F_SETTLEMENT_ITEM_CODE, Keys.KEY_F_SETTLEMENT_ITEM_SERIAL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FSettlementItem as(String alias) {
        return new FSettlementItem(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FSettlementItem as(Name alias) {
        return new FSettlementItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FSettlementItem rename(String name) {
        return new FSettlementItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FSettlementItem rename(Name name) {
        return new FSettlementItem(name, null);
    }
}
