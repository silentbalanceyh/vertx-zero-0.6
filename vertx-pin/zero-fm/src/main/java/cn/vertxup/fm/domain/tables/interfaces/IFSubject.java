/*
 * This file is generated by jOOQ.
*/
package cn.vertxup.fm.domain.tables.interfaces;


import java.io.Serializable;
import java.time.LocalDateTime;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IFSubject extends Serializable {

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.KEY</code>. 「key」- 会计科目ID
     */
    public IFSubject setKey(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.KEY</code>. 「key」- 会计科目ID
     */
    public String getKey();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.NAME</code>. 「name」 -  会计科目名称
     */
    public IFSubject setName(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.NAME</code>. 「name」 -  会计科目名称
     */
    public String getName();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.CODE</code>. 「code」 - 会计科目系统编号
     */
    public IFSubject setCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.CODE</code>. 「code」 - 会计科目系统编号
     */
    public String getCode();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.SERIAL</code>. 「serial」 - 会计科目编号
     */
    public IFSubject setSerial(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.SERIAL</code>. 「serial」 - 会计科目编号
     */
    public String getSerial();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.CATEGORY</code>. 「category」 - 会计科目关联类别，直接对接类型树
     */
    public IFSubject setCategory(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.CATEGORY</code>. 「category」 - 会计科目关联类别，直接对接类型树
     */
    public String getCategory();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.HELP_CODE</code>. 「helpCode」- 会计科目助记码
     */
    public IFSubject setHelpCode(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.HELP_CODE</code>. 「helpCode」- 会计科目助记码
     */
    public String getHelpCode();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.COMMENT</code>. 「comment」 - 会计科目备注
     */
    public IFSubject setComment(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.COMMENT</code>. 「comment」 - 会计科目备注
     */
    public String getComment();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.OWNER</code>. 「owner」- 科目方向：OUT-借方 / IN-贷方
     */
    public IFSubject setOwner(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.OWNER</code>. 「owner」- 科目方向：OUT-借方 / IN-贷方
     */
    public String getOwner();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.COMPANY_ID</code>. 「companyId」- 会计科目所属公司
     */
    public IFSubject setCompanyId(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.COMPANY_ID</code>. 「companyId」- 会计科目所属公司
     */
    public String getCompanyId();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.PARENT_ID</code>. 「parentId」- 会计科目父科目
     */
    public IFSubject setParentId(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.PARENT_ID</code>. 「parentId」- 会计科目父科目
     */
    public String getParentId();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.SIGMA</code>. 「sigma」- 统一标识
     */
    public IFSubject setSigma(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IFSubject setLanguage(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.ACTIVE</code>. 「active」- 是否启用
     */
    public IFSubject setActive(Boolean value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.METADATA</code>. 「metadata」- 附加配置数据
     */
    public IFSubject setMetadata(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.METADATA</code>. 「metadata」- 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IFSubject setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IFSubject setCreatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IFSubject setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>DB_ETERNAL.F_SUBJECT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IFSubject setUpdatedBy(String value);

    /**
     * Getter for <code>DB_ETERNAL.F_SUBJECT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IFSubject
     */
    public void from(cn.vertxup.fm.domain.tables.interfaces.IFSubject from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IFSubject
     */
    public <E extends cn.vertxup.fm.domain.tables.interfaces.IFSubject> E into(E into);

    default IFSubject fromJson(io.vertx.core.json.JsonObject json) {
        setKey(json.getString("KEY"));
        setName(json.getString("NAME"));
        setCode(json.getString("CODE"));
        setSerial(json.getString("SERIAL"));
        setCategory(json.getString("CATEGORY"));
        setHelpCode(json.getString("HELP_CODE"));
        setComment(json.getString("COMMENT"));
        setOwner(json.getString("OWNER"));
        setCompanyId(json.getString("COMPANY_ID"));
        setParentId(json.getString("PARENT_ID"));
        setSigma(json.getString("SIGMA"));
        setLanguage(json.getString("LANGUAGE"));
        setActive(json.getBoolean("ACTIVE"));
        setMetadata(json.getString("METADATA"));
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        setCreatedBy(json.getString("CREATED_BY"));
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        setUpdatedBy(json.getString("UPDATED_BY"));
        return this;
    }


    default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY",getKey());
        json.put("NAME",getName());
        json.put("CODE",getCode());
        json.put("SERIAL",getSerial());
        json.put("CATEGORY",getCategory());
        json.put("HELP_CODE",getHelpCode());
        json.put("COMMENT",getComment());
        json.put("OWNER",getOwner());
        json.put("COMPANY_ID",getCompanyId());
        json.put("PARENT_ID",getParentId());
        json.put("SIGMA",getSigma());
        json.put("LANGUAGE",getLanguage());
        json.put("ACTIVE",getActive());
        json.put("METADATA",getMetadata());
        // Omitting unrecognized type java.time.LocalDateTime for column CREATED_AT!
        json.put("CREATED_BY",getCreatedBy());
        // Omitting unrecognized type java.time.LocalDateTime for column UPDATED_AT!
        json.put("UPDATED_BY",getUpdatedBy());
        return json;
    }

}
