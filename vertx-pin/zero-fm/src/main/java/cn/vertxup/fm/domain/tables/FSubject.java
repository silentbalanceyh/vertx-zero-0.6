/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.fm.domain.tables;


import cn.vertxup.fm.domain.Db;
import cn.vertxup.fm.domain.Indexes;
import cn.vertxup.fm.domain.Keys;
import cn.vertxup.fm.domain.tables.records.FSubjectRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FSubject extends TableImpl<FSubjectRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.F_SUBJECT</code>
     */
    public static final FSubject F_SUBJECT = new FSubject();
    private static final long serialVersionUID = 362850873;
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.KEY</code>. 「key」- 会计科目ID
     */
    public final TableField<FSubjectRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 会计科目ID");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.NAME</code>. 「name」 -  会计科目名称
     */
    public final TableField<FSubjectRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "「name」 -  会计科目名称");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.CODE</code>. 「code」 - 会计科目系统编号
     */
    public final TableField<FSubjectRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "「code」 - 会计科目系统编号");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.SERIAL</code>. 「serial」 - 会计科目编号
     */
    public final TableField<FSubjectRecord, String> SERIAL = createField("SERIAL", org.jooq.impl.SQLDataType.VARCHAR(128), this, "「serial」 - 会计科目编号");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.CATEGORY</code>. 「category」 - 会计科目关联类别，直接对接类型树
     */
    public final TableField<FSubjectRecord, String> CATEGORY = createField("CATEGORY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「category」 - 会计科目关联类别，直接对接类型树");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.HELP_CODE</code>. 「helpCode」- 会计科目助记码
     */
    public final TableField<FSubjectRecord, String> HELP_CODE = createField("HELP_CODE", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「helpCode」- 会计科目助记码");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.COMMENT</code>. 「comment」 - 会计科目备注
     */
    public final TableField<FSubjectRecord, String> COMMENT = createField("COMMENT", org.jooq.impl.SQLDataType.CLOB, this, "「comment」 - 会计科目备注");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.OWNER</code>. 「owner」- 科目方向：OUT-借方 / IN-贷方
     */
    public final TableField<FSubjectRecord, String> OWNER = createField("OWNER", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「owner」- 科目方向：OUT-借方 / IN-贷方");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.COMPANY_ID</code>. 「companyId」- 会计科目所属公司
     */
    public final TableField<FSubjectRecord, String> COMPANY_ID = createField("COMPANY_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「companyId」- 会计科目所属公司");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.PARENT_ID</code>. 「parentId」- 会计科目父科目
     */
    public final TableField<FSubjectRecord, String> PARENT_ID = createField("PARENT_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「parentId」- 会计科目父科目");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<FSubjectRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<FSubjectRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<FSubjectRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<FSubjectRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<FSubjectRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<FSubjectRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<FSubjectRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.F_SUBJECT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<FSubjectRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.F_SUBJECT</code> table reference
     */
    public FSubject() {
        this(DSL.name("F_SUBJECT"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.F_SUBJECT</code> table reference
     */
    public FSubject(String alias) {
        this(DSL.name(alias), F_SUBJECT);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.F_SUBJECT</code> table reference
     */
    public FSubject(Name alias) {
        this(alias, F_SUBJECT);
    }

    private FSubject(Name alias, Table<FSubjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private FSubject(Name alias, Table<FSubjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FSubjectRecord> getRecordType() {
        return FSubjectRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.F_SUBJECT_CODE, Indexes.F_SUBJECT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FSubjectRecord> getPrimaryKey() {
        return Keys.KEY_F_SUBJECT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FSubjectRecord>> getKeys() {
        return Arrays.<UniqueKey<FSubjectRecord>>asList(Keys.KEY_F_SUBJECT_PRIMARY, Keys.KEY_F_SUBJECT_CODE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FSubject as(String alias) {
        return new FSubject(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FSubject as(Name alias) {
        return new FSubject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FSubject rename(String name) {
        return new FSubject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FSubject rename(Name name) {
        return new FSubject(name, null);
    }
}
