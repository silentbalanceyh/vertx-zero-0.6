/*
 * This file is generated by jOOQ.
 */
package cn.vertxup.fm.domain.tables;


import cn.vertxup.fm.domain.Db;
import cn.vertxup.fm.domain.Indexes;
import cn.vertxup.fm.domain.Keys;
import cn.vertxup.fm.domain.tables.records.FSettlementRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FSettlement extends TableImpl<FSettlementRecord> {

    /**
     * The reference instance of <code>DB_ETERNAL.F_SETTLEMENT</code>
     */
    public static final FSettlement F_SETTLEMENT = new FSettlement();
    private static final long serialVersionUID = -1880147974;
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.KEY</code>. 「key」- 结算单主键
     */
    public final TableField<FSettlementRecord, String> KEY = createField("KEY", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 结算单主键");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.CODE</code>. 「code」 - 结算单编号
     */
    public final TableField<FSettlementRecord, String> CODE = createField("CODE", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "「code」 - 结算单编号");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.SERIAL</code>. 「serial」 - 结算单据号
     */
    public final TableField<FSettlementRecord, String> SERIAL = createField("SERIAL", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "「serial」 - 结算单据号");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.AMOUNT</code>. 「amount」——价税合计，所有明细对应的实际结算金额
     */
    public final TableField<FSettlementRecord, BigDecimal> AMOUNT = createField("AMOUNT", org.jooq.impl.SQLDataType.DECIMAL(18, 2).nullable(false), this, "「amount」——价税合计，所有明细对应的实际结算金额");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.COMMENT</code>. 「comment」 - 结算单备注
     */
    public final TableField<FSettlementRecord, String> COMMENT = createField("COMMENT", org.jooq.impl.SQLDataType.CLOB, this, "「comment」 - 结算单备注");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.ROUNDED</code>. 「rounded」抹零方式 = true：四舍五入、round = false：零头舍掉,round,IS_ROUND
     */
    public final TableField<FSettlementRecord, Boolean> ROUNDED = createField("ROUNDED", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "「rounded」抹零方式 = true：四舍五入、round = false：零头舍掉,round,IS_ROUND");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.FINISHED</code>. 「finished」- 是否完成
     */
    public final TableField<FSettlementRecord, Boolean> FINISHED = createField("FINISHED", org.jooq.impl.SQLDataType.BIT, this, "「finished」- 是否完成");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.FINISHED_AT</code>. 「createdAt」- 完成时间
     */
    public final TableField<FSettlementRecord, LocalDateTime> FINISHED_AT = createField("FINISHED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 完成时间");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.SIGN_NAME</code>. 「signName」签单人姓名
     */
    public final TableField<FSettlementRecord, String> SIGN_NAME = createField("SIGN_NAME", org.jooq.impl.SQLDataType.VARCHAR(128), this, "「signName」签单人姓名");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.SIGN_MOBILE</code>. 「signMobile」签单人电话
     */
    public final TableField<FSettlementRecord, String> SIGN_MOBILE = createField("SIGN_MOBILE", org.jooq.impl.SQLDataType.VARCHAR(128), this, "「signMobile」签单人电话");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.ORDER_ID</code>. 「orderId」- 预授权所属订单ID
     */
    public final TableField<FSettlementRecord, String> ORDER_ID = createField("ORDER_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「orderId」- 预授权所属订单ID");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<FSettlementRecord, String> SIGMA = createField("SIGMA", org.jooq.impl.SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<FSettlementRecord, String> LANGUAGE = createField("LANGUAGE", org.jooq.impl.SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<FSettlementRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<FSettlementRecord, String> METADATA = createField("METADATA", org.jooq.impl.SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<FSettlementRecord, LocalDateTime> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「createdAt」- 创建时间");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<FSettlementRecord, String> CREATED_BY = createField("CREATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<FSettlementRecord, LocalDateTime> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "「updatedAt」- 更新时间");
    /**
     * The column <code>DB_ETERNAL.F_SETTLEMENT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<FSettlementRecord, String> UPDATED_BY = createField("UPDATED_BY", org.jooq.impl.SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    /**
     * Create a <code>DB_ETERNAL.F_SETTLEMENT</code> table reference
     */
    public FSettlement() {
        this(DSL.name("F_SETTLEMENT"), null);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.F_SETTLEMENT</code> table reference
     */
    public FSettlement(String alias) {
        this(DSL.name(alias), F_SETTLEMENT);
    }

    /**
     * Create an aliased <code>DB_ETERNAL.F_SETTLEMENT</code> table reference
     */
    public FSettlement(Name alias) {
        this(alias, F_SETTLEMENT);
    }

    private FSettlement(Name alias, Table<FSettlementRecord> aliased) {
        this(alias, aliased, null);
    }

    private FSettlement(Name alias, Table<FSettlementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FSettlementRecord> getRecordType() {
        return FSettlementRecord.class;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Db.DB_ETERNAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.F_SETTLEMENT_CODE, Indexes.F_SETTLEMENT_PRIMARY, Indexes.F_SETTLEMENT_SERIAL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FSettlementRecord> getPrimaryKey() {
        return Keys.KEY_F_SETTLEMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FSettlementRecord>> getKeys() {
        return Arrays.<UniqueKey<FSettlementRecord>>asList(Keys.KEY_F_SETTLEMENT_PRIMARY, Keys.KEY_F_SETTLEMENT_CODE, Keys.KEY_F_SETTLEMENT_SERIAL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FSettlement as(String alias) {
        return new FSettlement(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FSettlement as(Name alias) {
        return new FSettlement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FSettlement rename(String name) {
        return new FSettlement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FSettlement rename(Name name) {
        return new FSettlement(name, null);
    }
}
